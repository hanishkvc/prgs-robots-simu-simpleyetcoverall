# SimpleYetCoverALL
# HanishKVC, 2016
#


gC = dict( facing=0, x=0, y=0,
           visited = dict(),
           xMin = 0, xMax = 0, yMin = 0, yMax = 0,
           xWidth = 0, yWidth = 0,
           forXNumVisitsAlongY = dict(), forYNumVisitsAlongX = dict() )

gTMCnt = 0
gPZZBlockedL1 = 0
gPZZBlockedL2 = 0
gPZZOrientCnt = 0

print(gC)

def move_ext(markVisited=True):
    global gC
    if (gC['facing'] == 0):
        gC['y'] += 1
    elif (gC['facing'] == 1):
        gC['x'] -= 1
    elif (gC['facing'] == 2):
        gC['y'] -= 1
    elif (gC['facing'] == 3):
        gC['x'] += 1
    else:
        print("ERR: WRONGFACING: Facing:{}, X:{}, Y:{}".format(gC['facing'], gC['x'], gC['y']))
        exit()
    move()
    if markVisited:
        mark_as_visited()
    if gC['xMin'] > gC['x']:
        gC['xMin'] = gC['x']
    if gC['xMax'] < gC['x']:
        gC['xMax'] = gC['x']
    if gC['yMin'] > gC['y']:
        gC['yMin'] = gC['y']
    if gC['yMax'] < gC['y']:
        gC['yMax'] = gC['y']


def turn_left_ext():
    global gC
    gC['facing'] += 1
    if (gC['facing'] == 4):
        gC['facing'] = 0
    turn_left()


def turn_right_ext():
    turn_left_ext()
    turn_left_ext()
    turn_left_ext()


def turn_around():
    turn_left_ext()
    turn_left_ext()


def mark_as_visited():
    sKey = "{},{}".format(gC['x'],gC['y'])
    if gC['visited'].has_key(sKey):
        gC['visited'][sKey] += 1
    else:
        gC['visited'][sKey] = 1


def visited_already(X=None, Y=None):
    if X is None:
        X = gC['x']
    if Y is None:
        Y = gC['y']
    sKey = "{},{}".format(X,Y)
    #print("checking visited_already({})".format(sKey))
    if (gC['visited'].has_key(sKey)):
        return gC['visited'][sKey]
    else:
        return 0


def turn_magic():
    global gTMCnt
    if (gTMCnt == 0) or (gTMCnt == 1):
        print("Turn Left")
        turn_left_ext()
    else:
        print("Turn Right")
        turn_right_ext()
    gTMCnt += 1
    if (gTMCnt >= 4):
        gTMCnt = 0


def parzigzag_changeorientation():
    global gPZZBlockedL1
    global gPZZBlockedL2
    global gTMCnt
    global gPZZOrientCnt

    gTMCnt = 0
    gPZZBlockedL1 = 0
    gPZZBlockedL2 = 0
    gPZZOrientCnt += 1
    print("Changing Orientation")


gPZZNUMOFTURNAROUND4CHANGEORIENTATION = 4
def parzigzag():
    global gPZZBlockedL1
    global gPZZBlockedL2
    global gTMCnt
    global gPZZOrientCnt
    gTMCnt = 0
    gPZZBlockedL1 = 0
    gPZZBlockedL2 = 0
    gPZZOrientCnt = 0
    print("MODE: ParZigZag")
    iCnt = 0
    bContinue = True
    while bContinue:
        sKeyExt = "{},{},{}".format(gC['x'],gC['y'],gC['facing'])
        print(sKeyExt)
        mark_as_visited()
        if front_is_clear():
            move_ext()
        else:
            turn_magic()
            if front_is_clear():
                move_ext()
            else:
                gPZZBlockedL1 += 1
                if gPZZBlockedL1 > 2:
                    gPZZBlockedL1 = 0
                    gPZZBlockedL2 += 1
                    print("Turn Around")
                    turn_around()
            if gPZZBlockedL2 < gPZZNUMOFTURNAROUND4CHANGEORIENTATION:
                turn_magic()
            else:
                parzigzag_changeorientation()
                if (gPZZOrientCnt > 4):
                    print("Done with ParZigZag")
                    bContinue = False


def dirrandomdir(dir):
    print("MODE: DirRandomDir")
    bContinue = True
    iCnt = 0
    iChange = 20
    if (dir == 0):
        turn_dir = turn_left_ext
    else:
        turn_dir = turn_right_ext
    while bContinue:
        iCnt += 1
        if (iCnt % iChange) == 0:
            iChange = 4 + roll_dice()
            print("iChange = {}".format(iChange))
            turn_dir()
        if front_is_clear():
            move_ext()
        else:
            turn_dir()


def wallfollowtest1():
    while bContinue:
        if front_is_clear():
            move_ext()
        else:
            turn_left_ext()


def wallfollowtest2():
    bContinue = True
    iCnt = 0
    while bContinue:
        iCnt += 1
        if front_is_clear():
            move_ext()
        turn_left_ext()
        while front_is_clear():
            move_ext()


def wallfollowtest3():
    bContinue = True
    turn_dir = turn_left_ext
    turn_dir_opp = turn_right_ext
    while bContinue:
        turn_dir()
        if front_is_clear():
            move_ext()
        turn_right_ext()
        if front_is_clear():
            move_ext()
        else:
            turn_dir_opp()


def walkotherway_andcomeback(iWalkEitherSide,bExplore):
    gSX = gC['x']
    gSY = gC['y']
    gSFacing = gC['facing']
    for i in range(2): # Go and ComeBack so 2
        turn_around()
        while front_is_clear():
            if (gSX == gC['x']) and (gSY == gC['y']) and (i == 1):
                break
            move_ext()
            if (iWalkEitherSide > 0) and (i == 0):
                turn_left_ext()
                if near_lowvisitarea(False):
                    walkotherway_andcomeback(iWalkEitherSide-1,bExplore)
                turn_around()
                if near_lowvisitarea(False):
                    walkotherway_andcomeback(iWalkEitherSide-1,bExplore)
                turn_left_ext()
            elif bExplore and (iWalkEitherSide == 0) and (visited_already() == 1):
                print("wallfollow:rowcol+eitherside: Exploring...")
                turn_left_ext()
                if near_lowvisitarea(False):
                    walkotherway_andcomeback(iWalkEitherSide,bExplore)
                turn_around()
                if near_lowvisitarea(False):
                    walkotherway_andcomeback(iWalkEitherSide,bExplore)
                turn_left_ext()


def near_lowvisitarea(bAgressive=True):
    # TODO:FUTURE: Instead of the simple check of less than
    # other dimension's border, maybe
    # it should take a average of cells visited in the given
    # dimension and then use mid point between the border
    # width and average as the threshold
    # or better statistical model or so...
    # Assumes lazy evaluation where first the condition
    # to the left is checked, before checking the condition
    # towards right of the conditional statement.
    bXLow = False
    bYLow = False
    if ((gC['x']-1) >= gC['xMin']) and (gC['forXNumVisitsAlongY'][gC['x']-1] < gC['yWidth']):
        bXLow = True
    if (gC['forXNumVisitsAlongY'][gC['x']] < gC['yWidth']):
        bXLow = True
    if ((gC['x']+1) <= gC['xMax']) and (gC['forXNumVisitsAlongY'][gC['x']+1] < gC['yWidth']):
        bXLow = True

    if ((gC['y']-1) >= gC['yMin']) and (gC['forYNumVisitsAlongX'][gC['y']-1] < gC['xWidth']):
        bYLow = True
    if (gC['forYNumVisitsAlongX'][gC['y']] < gC['xWidth']):
        bYLow = True
    if ((gC['y']+1) <= gC['yMax']) and (gC['forYNumVisitsAlongX'][gC['y']+1] < gC['xWidth']):
        bYLow = True

    if (bAgressive and (bXLow or bYLow)):
        return True
    elif (bXLow and bYLow):
        return True
    else:
        return False


WALL2RIGHT = 0
WALL2LEFT = 1
gWALLFOLLOWQUITCNT = 2048
gWALLFOLLOWMAXREPEATCNT = 2
def wallfollow(bWalkCorrespondingRowCol=False,iWalkEitherSide=0,bExplore=False):
    print("MODE: WallFollow")
    wallTo = WALL2RIGHT
    turn_left_ext()
    if front_is_clear():
        turn_right_ext()
        turn_right_ext()
        if front_is_clear():
            print("No Wall to left or right, hunting...")
            while front_is_clear():
                move_ext()
            #turn_left_ext()
            wallTo = WALL2RIGHT
        else:
            wallTo = WALL2RIGHT
    else:
        wallTo = WALL2LEFT
    if wallTo == WALL2LEFT:
        print("Wall to left")
        turn_dir = turn_left_ext
        turn_dir_opp = turn_right_ext
        turn_dir_opp()
    else:
        print("Wall to right")
        turn_dir = turn_right_ext
        turn_dir_opp = turn_left_ext
        turn_dir_opp()

    gSX = gC['x']
    gSY = gC['y']
    gSFacing = gC['facing']
    gSAgain = 0
    iCnt = 0
    bContinue = True
    while bContinue:
        iCnt += 1
        if iCnt > gWALLFOLLOWQUITCNT:
            bContinue = False
        if (iCnt % 25) == 0:
            print("NumOf WallSide Steps = {}".format(iCnt))
        iDirCheckedCnt = 0
        while True:
            if (gSX == gC['x']) and (gSY == gC['y']) and (gSFacing == gC['facing']):
                gSAgain += 1
                print("At Starting position [{},{},{}] after {} steps, for {} time".format(gC['x'],gC['y'],gC['facing'],iCnt,gSAgain))
                if (gSAgain >= gWALLFOLLOWMAXREPEATCNT):
                    bContinue = False
            else:
                print("position [{},{},{}] after {} steps".format(gC['x'],gC['y'],gC['facing'],iCnt))
            turn_dir()
            if not front_is_clear():
                break
            iDirCheckedCnt += 1
            if (iDirCheckedCnt < 3) and front_is_clear():
                move_ext()
        if bWalkCorrespondingRowCol:
            if (iWalkEitherSide > 0) and (near_lowvisitarea()):
                print("Triggering WalkEitherSide for X,Y={},{}".format(gC['x'],gC['y']))
                walkotherway_andcomeback(iWalkEitherSide,bExplore)
            else:
                walkotherway_andcomeback(0,bExplore)
        turn_dir_opp()
        if front_is_clear():
            move_ext()
        else:
            turn_dir_opp()


def wallfollow_updateparams():
    global gWALLFOLLOWQUITCNT
    iXDelta = gC['xMax'] - gC['xMin']
    iYDelta = gC['yMax'] - gC['yMin']
    iBoundry = iXDelta + iYDelta
    print("iBoundry Found = {}".format(iBoundry))
    gWALLFOLLOWQUITCNT = int(iBoundry * 10.3)
    print("gWALLFOLLOWQUITCNT adjusted to {}".format(gWALLFOLLOWQUITCNT))


# iTurnMod = 1, it keeps growing every turn, TooFAST
# iTurnMod = 2, it keeps growing every 2 turns, PERFECT
# iTurnMod = 3, it keeps growing every 3 turns, INTERESTING
def spiral(turn_dir, iTurnMod):
    print("MODE: Spiral")
    bContinue = True
    iCnt = 0
    iTurn = 0
    iSpiral = 1
    while bContinue:
        iCnt += 1
        if iCnt > iSpiral:
            turn_dir()
            iCnt = 0
            iTurn += 1
            if (iTurn % iTurnMod) == 0:
                iSpiral += 1
        else:
            if front_is_clear():
                move_ext()


def find_visited_rowscols():
    global gC
    # Using Visited map
    # Find Ys (i.e cells of X) which are visited, for_each/along X
    # Find Xs (i.e cells of Y) which are visited, for_each/along Y
    gC['xWidth'] = (gC['xMax'] - gC['xMin']) + 1
    gC['yWidth'] = (gC['yMax'] - gC['yMin']) + 1
    print("X => {} to {}, Y => {} to {}".format(gC['xMin'], gC['xMax'], gC['yMin'], gC['yMax']))
    print("XWidth => {}, YWidth => {}".format(gC['xWidth'], gC['yWidth']))
    for x in range(gC['xMin'], gC['xMax']+1):
        for y in range(gC['yMin'], gC['yMax']+1):
            gC['forXNumVisitsAlongY'][x] = 0
            gC['forYNumVisitsAlongX'][y] = 0
    for x in range(gC['xMin'], gC['xMax']+1):
        for y in range(gC['yMin'], gC['yMax']+1):
            if (visited_already(x,y) > 0):
                gC['forXNumVisitsAlongY'][x] += 1
                gC['forYNumVisitsAlongX'][y] += 1
    for x in range(gC['xMin'], gC['xMax']+1):
        print("For X[{}], numOfYs visited = {}".format(x, gC['forXNumVisitsAlongY'][x]))
    for y in range(gC['yMin'], gC['yMax']+1):
        print("For Y[{}], numOfXs visited = {}".format(y, gC['forYNumVisitsAlongX'][y]))
    # This may be used in future such that one
    # Follows Wall to reach these low visited areas
    # and run ParZigZag or something similar there to reach these not visited places


print(dir())

#
# Functions which potentially cover the full area most of the time
#parzigzag()
#leftrandomleft()
#dirrandomdir(1)
#
# Some interesting movements
#spiral(turn_left_ext, 2)
#
#wallfollow()
#

def superwalk_ok1():
    bContinue = True
    while bContinue:
        parzigzag()
        wallfollow_updateparams()
        wallfollow()
        find_visited_rowscols()
        bContinue = False # This is temporary for debugging

# For the last wallfollow
# if iWalkEitherSide == 1, covers areas/rooms with objects scattered in them
#                    == 2, even covers rooms with enclosed spiral areas within them
def superwalk_good():
    global gWALLFOLLOWQUITCNT
    gWALLFOLLOWQUITCNT = 301
    wallfollow(True)
    find_visited_rowscols()
    wallfollow(True,1,True)

superwalk_good()

